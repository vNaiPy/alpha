package com.naipy.alpha.modules.user_address.service;

import com.naipy.alpha.modules.address.models.Address;
import com.naipy.alpha.modules.address.models.AddressDTO;
import com.naipy.alpha.modules.address.models.AddressEnriched;
import com.naipy.alpha.modules.address.service.AddressService;
import com.naipy.alpha.modules.utils.ChargeAddressObject;
import com.naipy.alpha.modules.utils.ServiceUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;


class UserAddressServiceTest extends ServiceUtils {

    @Mock
    AddressService addressService;

    @InjectMocks
    UserAddressService userAddressService;

    @BeforeEach
    void setup () {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void addAddressToUser() {
        Address addressExpected = Address.builder()
                .id(ChargeAddressObject.uuidNonAutogenerated())
                .street("Rua Gasparini")
                .neighborhood("Vila Normandia")
                .zipcode("09635130")
                .city("São Bernardo do Campo")
                .state("São Paulo")
                .country("Brasil")
                .latitude("-23.6509129")
                .longitude("-46.57409550000001")
                .build();
        AddressEnriched addressEnrichedExpected = AddressEnriched.builder()
                .address(addressExpected)
                .streetNumber("130")
                .build();

        String zipCode = "09635-130";
        String streetNumber = "130";

        Mockito.when(addressService.getAddressAndAddIfDoesntExists(zipCode)).thenReturn(new AddressDTO(ChargeAddressObject.getOneAddress()));
        AddressDTO addressDTO = addressService.getAddressAndAddIfDoesntExists(zipCode);

        Mockito.when(userAddressService.getExactAddressOfUser(addressDTO, streetNumber)).thenReturn(ChargeAddressObject.getOneAddressEnriched());
        AddressEnriched addressEnriched = userAddressService.getExactAddressOfUser(addressDTO, streetNumber);
        Assertions.assertEquals(addressEnrichedExpected, addressEnriched);
    }

    @Test
    void getExactAddressOfUser() {
        AddressDTO address = new AddressDTO(ChargeAddressObject.getOneAddress());
        String streetNumber = "130";

        userAddressService.getExactAddressOfUser(address, streetNumber);


    }
}