type Mutation {
    #Auth
    register (request: RegisterRequest): AuthenticationResponse
    authenticate (request: AuthenticationRequest): AuthenticationResponse
    #Store
    storeRegistration(store: StoreInput): Store
    #Category
    addCategory (category: CategoryInput): Category
}

type Query {
    #Store
    findStoreByCurrentUser: Store
    findAllStore: [Store]
    #Category
    findByCategoryId (id: ID): Category
    findAllCategories: [Category]
    #Order
    findAllOrders: [Order]
    findByOrderId (id: ID): Order
}

#Category
input CategoryInput {
    name: String!
}

type Category {
    id: ID!
    name: String
}

#Auth
input RegisterRequest {
    name: String!,
    email: String!,
    phone: String!,
    password: String!,
}

input AuthenticationRequest {
    username: String!,
    password: String!
}

type AuthenticationResponse {
    token: String!
}

#User
type User {
    id: ID,
    name: String
    email: String,
    phone: String
}

#Product
type Product {
    id: ID,
    name: String,
    description: String,
    price: Float,
    imgUrl: String,
    status: String,
    store: Store,
    categories: [Category],
    items: [OrderItem]
}

#Store
input StoreInput {
    name: String!,
    logoUrl: String!,
    bannerUrl: String!
}

type Store {
    name: String,
    logoUrl: String,
    bannerUrl: String,
    instant: String
}

#Order
type Order {
    id: ID,
    moment: String
    orderStatus: String,
    client: User,
    items: [OrderItem]
    payment: Payment
}

#OrderItem
type OrderItem {
    quantity: Int,
    price: Float
    product: Product
    subTotal: Float
}

#Payment
type Payment {
    id: ID,
    instant: String
}
